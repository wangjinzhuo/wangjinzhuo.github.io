<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jinzhuo Wang</title>
  <subtitle>Yesterday you said tommorow</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wangjinzhuo.com/"/>
  <updated>2018-02-05T12:02:10.000Z</updated>
  <id>http://www.wangjinzhuo.com/</id>
  
  <author>
    <name>Jinzhuo Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Model assistance in deep learning</title>
    <link href="http://www.wangjinzhuo.com/2017/08/18/multiple-models/"/>
    <id>http://www.wangjinzhuo.com/2017/08/18/multiple-models/</id>
    <published>2017-08-18T09:14:40.000Z</published>
    <updated>2018-02-05T12:02:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>We are in the era of deep neural networks being designed constantly designed. Most efforts are devoted to hand-crafted engineering of single network, including architecture design, parameter tuning and optimization.</p>
<p>Althougth diverse deep neural networks have been developed, how to efficiently leverage full potential of these models and make use of their collaboration remain challenging and unsolved issues.</p>
<p>We have submitted a paper to IJCAI-2018 named - Model Assistance with Collaborative Learning - to achieve model assistance in a win-win process.</p>
<a id="more"></a>
<p>The key idea behind collaborative learning is to share mutual knowledge from the involved models in their learning processes to assist each other as additional supervision. We achieve this process with a mutual knowledge base (MKB) which includes an encoder-decoder structure, a metric learning module and a verification part. The encoder transfers arbitrary intermediate feature maps of the involved models to unified embeddings in mutual space, which are prepared to perform additional supervision with metric leanring and verification, as well as sent back to the original networks to keep end-to-end trainable. </p>
<p>collaborative learning can be applied to any deep neural networks and easily extended to multiple models. Compared with teacher-student framework, our method enjoys bi-directional assistance and needs no requirements of models such as pre-training and ability difference. </p>
<p>Experimental results on image classification tasks demonstrate our method can efficiently improve the learning ability of all the involved models, with superior performance comapred with strong baselines and relevant approaches.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We are in the era of deep neural networks being designed constantly designed. Most efforts are devoted to hand-crafted engineering of single network, including architecture design, parameter tuning and optimization.&lt;/p&gt;
&lt;p&gt;Althougth diverse deep neural networks have been developed, how to efficiently leverage full potential of these models and make use of their collaboration remain challenging and unsolved issues.&lt;/p&gt;
&lt;p&gt;We have submitted a paper to IJCAI-2018 named - Model Assistance with Collaborative Learning - to achieve model assistance in a win-win process.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Deep learning" scheme="http://www.wangjinzhuo.com/tags/Deep-learning/"/>
    
      <category term="Model assistance" scheme="http://www.wangjinzhuo.com/tags/Model-assistance/"/>
    
  </entry>
  
  <entry>
    <title>Collaborative learing with knowledge sharing</title>
    <link href="http://www.wangjinzhuo.com/2017/06/07/cll-mkb/"/>
    <id>http://www.wangjinzhuo.com/2017/06/07/cll-mkb/</id>
    <published>2017-06-07T07:09:17.000Z</published>
    <updated>2017-08-16T03:22:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently arise many successful deep architectures that are carefully designed for tasks in artificial intelligence, computer vision, natural language processing and speech recognition. In such cases, one model (or deep architecture) trained with one task (specific input and output) can learn corresponding knowledge. Different models can learn task-specific knowledge. On the other hand, the target tasks share many relevant properties (such as image classification and semantic segmentation), the learnt knowledge that exists among the model is expected to have something in common. This paper aim at levering such information to achieve model assistance, and consequently improving the performance of involved models.</p>
<a id="more"></a>
<p>In particular, we introduce a new learnable module called collaborative learning layer (CLL) that is responsible to mix the learnt knowledge of involved models and extract relevant knowledge to achieve assistance. The core structure of our proposed module is built around a differentiable mutual knowledge base (MKB), which preserves and updates the mutual knowledge.  The MKB recieves encoded knowledge of individual models and mixed them into a universal representation. We show how to train CLL along with involved models and the use of CLL can improve the performance of involved models.</p>
<p>The CLL is very flexible and can be deployed with many settings. First, it can be inserted among multiple architectures, which means it is able to help model assistance. Second, multiple CLLs can be used to enhance the performance of Collaborative learning. Third, CLL can be applied with tasks that are the same, relevant, and even non-relevant.</p>
<p><img src="/images/cll.png"></p>
<p>Things are different in the procedures of training and testing. Once training is done, the only useful part is MKB, as shown in the following figure.</p>
<p><img src="/images/tr-te.png"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently arise many successful deep architectures that are carefully designed for tasks in artificial intelligence, computer vision, natural language processing and speech recognition. In such cases, one model (or deep architecture) trained with one task (specific input and output) can learn corresponding knowledge. Different models can learn task-specific knowledge. On the other hand, the target tasks share many relevant properties (such as image classification and semantic segmentation), the learnt knowledge that exists among the model is expected to have something in common. This paper aim at levering such information to achieve model assistance, and consequently improving the performance of involved models.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Deep learning" scheme="http://www.wangjinzhuo.com/tags/Deep-learning/"/>
    
      <category term="On-going project" scheme="http://www.wangjinzhuo.com/tags/On-going-project/"/>
    
  </entry>
  
  <entry>
    <title>Properties of neural networks</title>
    <link href="http://www.wangjinzhuo.com/2017/04/07/properties-of-neural-networks/"/>
    <id>http://www.wangjinzhuo.com/2017/04/07/properties-of-neural-networks/</id>
    <published>2017-04-07T06:46:25.000Z</published>
    <updated>2017-08-09T04:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Intriguing properties of neural networks – <a href="https://arxiv.org/pdf/1312.6199.pdf" target="_blank" rel="external">https://arxiv.org/pdf/1312.6199.pdf</a></p>
<ol>
<li>It suggests that it is the space, rather than the individual units, that contains the semantic information in the high layers of neural networks.</li>
<li>It suggests that the learnt input-output mappings by deep neural networks are fairly discontinuous. That means it is easy to fool a well trained neural networks.</li>
</ol>
<a id="more"></a>
<p>See also in <a href="https://arxiv.org/pdf/1412.6572.pdf" target="_blank" rel="external">https://arxiv.org/pdf/1412.6572.pdf</a> where the authors show it is easy to generate adversarial examples which are close to the original ones but are misclassified by neural networks. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Intriguing properties of neural networks – &lt;a href=&quot;https://arxiv.org/pdf/1312.6199.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://arxiv.org/pdf/1312.6199.pdf&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It suggests that it is the space, rather than the individual units, that contains the semantic information in the high layers of neural networks.&lt;/li&gt;
&lt;li&gt;It suggests that the learnt input-output mappings by deep neural networks are fairly discontinuous. That means it is easy to fool a well trained neural networks.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Deep learning" scheme="http://www.wangjinzhuo.com/tags/Deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>Conference attendance report of AAAI-2017</title>
    <link href="http://www.wangjinzhuo.com/2017/02/19/aaai-2017/"/>
    <id>http://www.wangjinzhuo.com/2017/02/19/aaai-2017/</id>
    <published>2017-02-19T13:08:00.000Z</published>
    <updated>2017-08-15T15:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>AAAI 2017 took place in San Francisco and lasted for 5 days.</p>
<p>First time attending to AAAI, a coverall AI conference which accepts papers of every aspect of AI research.</p>
<a id="more"></a>
<p>A great talk given by Prof. Grauman about learning from unlabeled videos <a href="http://www.cs.utexas.edu/%7Egrauman/slides/grauman-AAAI2017.pdf" target="_blank" rel="external">http://www.cs.utexas.edu/%7Egrauman/slides/grauman-AAAI2017.pdf</a>, which I think is close to recent popular attention model.<br><img src="/images/aaai.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AAAI 2017 took place in San Francisco and lasted for 5 days.&lt;/p&gt;
&lt;p&gt;First time attending to AAAI, a coverall AI conference which accepts papers of every aspect of AI research.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Conference attendance" scheme="http://www.wangjinzhuo.com/tags/Conference-attendance/"/>
    
  </entry>
  
  <entry>
    <title>Conference attendance report of NIPS 2016</title>
    <link href="http://www.wangjinzhuo.com/2016/12/15/nips-2016/"/>
    <id>http://www.wangjinzhuo.com/2016/12/15/nips-2016/</id>
    <published>2016-12-15T02:44:20.000Z</published>
    <updated>2017-08-09T04:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Glad to attend NIPS 2016 in Barcelona, a beautiful costal city in Spain. It is lucky for a football fan to join a party in Nou Camp.</p>
<p>There are many famous researchers including LeCun, Schmidhuber and other yound research scientists in DeepMind and OpenAI. They give talks, introduce posts, communicate and share ideas. I like such atmosphere.</p>
<a id="more"></a>
<p>An impressive work is “Learning to learn by gradient descent by gradient descent” by M.Andrychowicz et.al. in DeepMind. I read its previous version in arxiv and asked the authors at poster room in the first evening. You can not imagine how popular the DeepMind’s paper was. I waited for almost half of an hour to ask the author several questions. </p>
<p><img src="/images/learning.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Glad to attend NIPS 2016 in Barcelona, a beautiful costal city in Spain. It is lucky for a football fan to join a party in Nou Camp.&lt;/p&gt;
&lt;p&gt;There are many famous researchers including LeCun, Schmidhuber and other yound research scientists in DeepMind and OpenAI. They give talks, introduce posts, communicate and share ideas. I like such atmosphere.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Conference attendance" scheme="http://www.wangjinzhuo.com/tags/Conference-attendance/"/>
    
  </entry>
  
  <entry>
    <title>Tricks_in_DNN</title>
    <link href="http://www.wangjinzhuo.com/2016/08/16/tricks-in-dnn/"/>
    <id>http://www.wangjinzhuo.com/2016/08/16/tricks-in-dnn/</id>
    <published>2016-08-16T05:55:03.000Z</published>
    <updated>2018-02-05T12:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="lamda.nju.edu.cn/weixs/project/CNNTricks/CNNTricks.html">Must know Tips/Tricks in Deep Neural Networks</a></p>
<p><a href="www.cs.umb.edu/~twang/file/tricks_from_dl.pdf">Tricks from Deep Neural Network</a></p>
<p><a href="www.kdnuggets.com/2015/12/top-10-deep-learning-tips-tricks.html">Top 10 Deep Learning Tips &amp; Tricks</a></p>
<p><a href="blog.csdn.net/BVL10101111/article/details/72614711">Optimization</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;lamda.nju.edu.cn/weixs/project/CNNTricks/CNNTricks.html&quot;&gt;Must know Tips/Tricks in Deep Neural Networks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;www.c
    
    </summary>
    
    
      <category term="Deep learning" scheme="http://www.wangjinzhuo.com/tags/Deep-learning/"/>
    
      <category term="Tricks" scheme="http://www.wangjinzhuo.com/tags/Tricks/"/>
    
  </entry>
  
  <entry>
    <title>Smartcity competition</title>
    <link href="http://www.wangjinzhuo.com/2015/07/21/anomaly-detection-match/"/>
    <id>http://www.wangjinzhuo.com/2015/07/21/anomaly-detection-match/</id>
    <published>2015-07-21T05:44:41.000Z</published>
    <updated>2017-08-09T04:42:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>The finals of Smartcity competition for chinese graduates raised the curtain in Wuhan University, July.</p>
<p>Our team participated in the task of video anomaly detection. Our algorithm is based on an unsupervised analysis of trajectory features of normal videos, as the number of anomaly videos available is rather small. We first build a mix model composed of normal bases, and calculate the distance of test videos to the learnt bases to make judgement.</p>
<a id="more"></a>
<p>Our final performance ranked at the second position. It is a not bad result.</p>
<p><img src="/images/wuhan.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The finals of Smartcity competition for chinese graduates raised the curtain in Wuhan University, July.&lt;/p&gt;
&lt;p&gt;Our team participated in the task of video anomaly detection. Our algorithm is based on an unsupervised analysis of trajectory features of normal videos, as the number of anomaly videos available is rather small. We first build a mix model composed of normal bases, and calculate the distance of test videos to the learnt bases to make judgement.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Video anomaly detection" scheme="http://www.wangjinzhuo.com/tags/Video-anomaly-detection/"/>
    
      <category term="competition" scheme="http://www.wangjinzhuo.com/tags/competition/"/>
    
  </entry>
  
  <entry>
    <title>Understanding LSTM</title>
    <link href="http://www.wangjinzhuo.com/2015/04/11/lstm/"/>
    <id>http://www.wangjinzhuo.com/2015/04/11/lstm/</id>
    <published>2015-04-11T13:36:59.000Z</published>
    <updated>2017-08-16T05:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Recurrent-Neural-Networks-RNN"><a href="#Recurrent-Neural-Networks-RNN" class="headerlink" title="Recurrent Neural Networks (RNN)"></a>Recurrent Neural Networks (RNN)</h2><p>Human don’t start their thinkning from scratch every second. As you read this essay, you understand each word based on your understanding of previous words. You don’t throw everything away and start thinking from scratch again. Your thoughts have persistence.</p>
<p>Traditional neural networks can’t do this, and it seems like a major shortcoming. For example, imagine you want to classify what kind of event is happening at every point in a movie. It’s unclear how a traditional neural network could use its reasoning about previous events in the film to inform later ones.</p>
<a id="more"></a>
<p>Recurrent neural networks address this issue. They are networks with loops in them, allowing information to persist.</p>
<!-- ![](/images/rnn.png) -->
<p><img src="/images/rnn.png" height="100" width="200"></p>
<p>In the above diagram, a chunk of neural network, $A$, looks at some input $x_t$ and outputs a value $h_t$. A loop allows information to be passed from one step of the network to the next.</p>
<p>These loops make recurrent neural networks seem kind of mysterious. However, if you think a bit more, it turns out that they aren’t all that different than a normal neural network. A recurrent neural network can be thought of as multiple copies of the same network, each passing a message to a successor. Consider what happens if we unroll the loop:</p>
<p><img src="/images/unrolled-rnn.png" alt=""></p>
<p>This chain-like nature reveals that recurrent neural networks are intimately related to sequences and lists. They’re the natural architecture of neural network to use for such data.</p>
<p>And they certainly are used! In the last few years, there have been incredible success applying RNNs to a variety of problems: speech recognition, language modeling, translation, image captioning. The list goes on. I’ll leave discussion of the amazing feats one can achieve with RNNs to Andrej Karpathy’s excellent blog post, <a href="karpathy.github.io/2015/05/21/rnn-effectiveness">The Unreasonable Effectiveness of Recurrent Neural Networks</a>. But they really are pretty amazing.</p>
<p>Essential to these successes is the use of “LSTMs”, a very special kind of recurrent neural network which works, for many tasks, much much better than the standard version. Almost all exciting results based on recurrent neural networks are achieved with them. It’s these LSTMs that this essay will explore.</p>
<h2 id="The-Problem-of-Long-Term-Dependencies"><a href="#The-Problem-of-Long-Term-Dependencies" class="headerlink" title="The Problem of Long-Term Dependencies"></a>The Problem of Long-Term Dependencies</h2><p>One of the appeals of RNNs is the idea that they might be able to connect previous information to the present task, such as using previous video frames might inform the understanding of the present frame. If RNNs could do this, they’d be extremely useful. But can they? It depends.</p>
<p>Sometimes, we only need to look at recent information to perform the present task. For example, consider a language model trying to predict the next word based on the previous ones. If we are trying to predict the last word in “the clouds are in the <em>sky</em>“, we don’t need any further context – it’s pretty obvious the next word is going to be sky. In such cases, where the gap between the relevant information and the place that it’s needed is small, RNNs can learn to use the past information.</p>
<p><img src="/images/rnn-1.png" alt=""></p>
<p>But there are also cases where we need more context. Consider trying to predict the last word in the text “I grew up in France … I speak fluent <em>French</em>“. Recent information suggests that the next word is probably the name of a language, but if we want to narrow down which language, we need the context of France, from further back. It’s entirely possible for the gap between the relevant information and the point where it is needed to become very large.</p>
<p>Unfortunately, as that gap grows, RNNs become unable to learn to connect the information.</p>
<p><img src="/images/rnn-2.png" alt=""></p>
<p>Neural networks struggle with long term dependencies.</p>
<p>In theory, RNNs are absolutely capable of handling such “long-term dependencies.” A human could carefully pick parameters for them to solve toy problems of this form. Sadly, in practice, RNNs don’t seem to be able to learn them. The problem was explored in depth by <a href="people.idsia.ch/~juergen/SeppHochreiter1991ThesisAdvisorSchmidhuber.pdf">Hochreiter (1991)</a> and <a href="www-dsi.ing.unifi.it/~paolo/tnn-94-gradient.pdf">Bengio, et al. (1994)</a>, who found some pretty fundamental reasons why it might be difficult.</p>
<p>Thankfully, LSTMs don’t have this problem!</p>
<h2 id="LSTM-Networks"><a href="#LSTM-Networks" class="headerlink" title="LSTM Networks"></a>LSTM Networks</h2><p>Long Short Term Memory networks – usually just called “LSTMs” – are a special kind of RNN, capable of learning long-term dependencies. They were introduced by <a href="web.eecs.utk.edu/~itamar/courses/ECE-692/Bobby_paper1.pdf">Hochreiter &amp; Schmidhuber (1997)</a> and were refined and popularized by many people in following work. They work tremendously well on a large variety of problems, and are now widely used.</p>
<p>LSTMs are explicitly designed to avoid the long-term dependency problem. Remembering information for long periods of time is practically their default behavior, not something they struggle to learn!</p>
<p>All recurrent neural networks have the form of a chain of repeating modules of neural network. In standard RNNs, this repeating module will have a very simple structure, such as a single tanh layer.</p>
<p><img src="/images/lstm-1.png" alt=""></p>
<p>LSTMs also have this chain like structure, but the repeating module has a different structure. Instead of having a single neural network layer, there are four, interacting in a very special way.</p>
<p><img src="/images/lstm-2.png" alt=""></p>
<p>Don’t worry about the details of what’s going on. We’ll walk through the LSTM diagram step by step later. For now, let’s just try to get comfortable with the notation we’ll be using.</p>
<p><img src="/images/lstm-3.png" alt=""></p>
<p>In the above diagram, each line carries an entire vector, from the output of one node to the inputs of others. The pink circles represent pointwise operations, like vector addition, while the yellow boxes are learned neural network layers. Lines merging denote concatenation, while a line forking denote its content being copied and the copies going to different locations.</p>
<h2 id="The-Core-Idea-Behind-LSTMs"><a href="#The-Core-Idea-Behind-LSTMs" class="headerlink" title="The Core Idea Behind LSTMs"></a>The Core Idea Behind LSTMs</h2><p>The key to LSTMs is the cell state, the horizontal line running through the top of the diagram.</p>
<p>The cell state is kind of like a conveyor belt. It runs straight down the entire chain, with only some minor linear interactions. It’s very easy for information to just flow along it unchanged.</p>
<p><img src="/images/lstm-4.png" alt=""></p>
<p>The LSTM does have the ability to remove or add information to the cell state, carefully regulated by structures called gates.</p>
<p>Gates are a way to optionally let information through. They are composed out of a sigmoid neural net layer and a pointwise multiplication operation.</p>
<p><img src="/images/lstm-5.png" alt=""></p>
<p>The sigmoid layer outputs numbers between zero and one, describing how much of each component should be let through. A value of zero means “let nothing through,” while a value of one means “let everything through!”</p>
<p>An LSTM has three of these gates, to protect and control the cell state.</p>
<h2 id="Step-by-Step-LSTM-Walk-Through"><a href="#Step-by-Step-LSTM-Walk-Through" class="headerlink" title="Step-by-Step LSTM Walk Through"></a>Step-by-Step LSTM Walk Through</h2><p>The first step in our LSTM is to decide what information we’re goint to throw away from the cell state. This decision is made by a sigmoid layer called “forget gate layer”. It looks at $h_{t-1}$ and $x_t$, </p>
<p>and outputs a number 0 between 1 and for each number in the cell state ${\widetilde{C}}_{t-1}$. A 1 represents “completely keep this” and a 0 represents “completely get rid of this”.</p>
<p>Let’s go back to our example of a language model trying to predict the next word based on all the previous ones. In such a problem, the cell state might include the gender of the present subject, so that the correct pronouns can be used. When we see a new subject, we want to forget the gender of the old subject.</p>
<p><img src="/images/lstm-6.png" alt=""></p>
<p>The next step is to decide what new information we’re going to store in the cell state. This has two parts. First, a sigmoid layer called the “input gate layer” decides which values we’ll update. Next, a tanh layer creates a vector of new candidate values, $\widetilde{C}_t$, that could be added to the state. In the next step, we’ll combine these two to create an update to the state.</p>
<p>In the example of our language model, we’d want to add the gender of the new subject to the cell state, to replace the old one we’re forgetting.</p>
<p><img src="/images/lstm-7.png" alt=""></p>
<p>It’s now time to update the old cell state, $C_{t−1}$, into the new cell state $C_t$. The previous steps already decided what to do, we just need to actually do it.</p>
<p>We multiply the old state by $f_t$, forgetting the things we decided to forget earlier. Then we add $i_t \times \widetilde{C}_t$. This is the new candidate values, scaled by how much we decided to update each state value.</p>
<p>In the case of the language model, this is where we’d actually drop the information about the old subject’s gender and add the new information, as we decided in the previous steps.</p>
<p><img src="/images/lstm-8.png" alt=""></p>
<p>Finally, we need to decide what we’re going to output. This output will be based on our cell state, but will be a filtered version. First, we run a sigmoid layer which decides what parts of the cell state we’re going to output. Then, we put the cell state through tanhtanh (to push the values to be between -1 and 1) and multiply it by the output of the sigmoid gate, so that we only output the parts we decided to.</p>
<p>For the language model example, since it just saw a subject, it might want to output information relevant to a verb, in case that’s what is coming next. For example, it might output whether the subject is singular or plural, so that we know what form a verb should be conjugated into if that’s what follows next.</p>
<p><img src="/images/lstm-9.png" alt=""></p>
<h2 id="Variants-on-LSTM"><a href="#Variants-on-LSTM" class="headerlink" title="Variants on LSTM"></a>Variants on LSTM</h2><p>What I’ve described so far is a pretty normal LSTM. But not all LSTMs are the same as the above. In fact, it seems like almost every paper involving LSTMs uses a slightly different version. The differences are minor, but it’s worth mentioning some of them.</p>
<p>One popular LSTM variant, introduced by <a href="ftp://ftp.idsia.ch/pub/juergen/TimeCount-IJCNN2000.pdf" target="_blank" rel="external">Gers &amp; Schmidhuber (2000)</a>, is adding “peephole connections.” This means that we let the gate layers look at the cell state.</p>
<p><img src="/images/lstm-10.png" alt=""></p>
<p>The above diagram adds peepholes to all the gates, but many papers will give some peepholes and not others.</p>
<p>Another variation is to use coupled forget and input gates. Instead of separately deciding what to forget and what we should add new information to, we make those decisions together. We only forget when we’re going to input something in its place. We only input new values to the state when we forget something older.</p>
<p><img src="/images/lstm-11.png" alt=""></p>
<p>A slightly more dramatic variation on the LSTM is the Gated Recurrent Unit, or GRU, introduced by <a href="https://arxiv.org/pdf/1406.1078v3.pdf" target="_blank" rel="external">Cho, et al. (2014)</a>. It combines the forget and input gates into a single “update gate.” It also merges the cell state and hidden state, and makes some other changes. The resulting model is simpler than standard LSTM models, and has been growing increasingly popular.</p>
<p><img src="/images/lstm-12.png" alt=""></p>
<p>These are only a few of the most notable LSTM variants. There are lots of others, like Depth Gated RNNs by <a href="https://arxiv.org/pdf/1508.03790v2.pdf" target="_blank" rel="external">Yao, et al. (2015)</a>. There’s also some completely different approach to tackling long-term dependencies, like Clockwork RNNs by <a href="https://arxiv.org/pdf/1402.3511v1.pdf" target="_blank" rel="external">Koutnik, et al. (2014)</a>.</p>
<p>Which of these variants is best? Do the differences matter? <a href="https://arxiv.org/pdf/1503.04069.pdf" target="_blank" rel="external">Greff, et al. (2015)</a> do a nice comparison of popular variants, finding that they’re all about the same. <a href="proceedings.mlr.press/v37/Jozefowicz15.pdf">Jozefowicz, et al. (2015)</a> tested more than ten thousand RNN architectures, finding some that worked better than LSTMs on certain tasks.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Earlier, I mentioned the remarkable results people are achieving with RNNs. Essentially all of these are achieved using LSTMs. They really work a lot better for most tasks!</p>
<p>Written down as a set of equations, LSTMs look pretty intimidating. Hopefully, walking through them step by step in this essay has made them a bit more approachable.</p>
<p>LSTMs were a big step in what we can accomplish with RNNs. It’s natural to wonder: is there another big step? A common opinion among researchers is: “Yes! There is a next step and it’s attention!” The idea is to let every step of an RNN pick information to look at from some larger collection of information. For example, if you are using an RNN to create a caption describing an image, it might pick a part of the image to look at for every word it outputs. In fact, <a href="https://arxiv.org/pdf/1502.03044v2.pdf" target="_blank" rel="external">Xu, et al. (2015)</a> do exactly this – it might be a fun starting point if you want to explore attention! There’s been a number of really exciting results using attention, and it seems like a lot more are around the corner…</p>
<p>Attention isn’t the only exciting thread in RNN research. For example, Grid LSTMs by <a href="https://arxiv.org/pdf/1507.05126v1pdf" target="_blank" rel="external">Kalchbrenner, et al. (2015)</a> seem extremely promising. Work using RNNs in generative models – such as <a href="https://arxiv.org/pdf/1502.04623.pdf" target="_blank" rel="external">Gregor, et al. (2015)</a>, <a href="https://arxiv.org/pdf/1506.02216v3.pdf" target="_blank" rel="external">Chung, et al. (2015)</a>, or <a href="https://arxiv.org/pdf/1411.7610v3.pdf" target="_blank" rel="external">Bayer &amp; Osendorfer (2015)</a> – also seems very interesting. The last few years have been an exciting time for recurrent neural networks, and the coming ones promise to only be more so!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Recurrent-Neural-Networks-RNN&quot;&gt;&lt;a href=&quot;#Recurrent-Neural-Networks-RNN&quot; class=&quot;headerlink&quot; title=&quot;Recurrent Neural Networks (RNN)&quot;&gt;&lt;/a&gt;Recurrent Neural Networks (RNN)&lt;/h2&gt;&lt;p&gt;Human don’t start their thinkning from scratch every second. As you read this essay, you understand each word based on your understanding of previous words. You don’t throw everything away and start thinking from scratch again. Your thoughts have persistence.&lt;/p&gt;
&lt;p&gt;Traditional neural networks can’t do this, and it seems like a major shortcoming. For example, imagine you want to classify what kind of event is happening at every point in a movie. It’s unclear how a traditional neural network could use its reasoning about previous events in the film to inform later ones.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Deep Learning" scheme="http://www.wangjinzhuo.com/tags/Deep-Learning/"/>
    
      <category term="LSTM" scheme="http://www.wangjinzhuo.com/tags/LSTM/"/>
    
  </entry>
  
</feed>
